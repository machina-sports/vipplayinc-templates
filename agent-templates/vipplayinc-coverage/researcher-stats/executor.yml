workflow:

  name: coverage-researcher-stats-executor
  title: "Coverage - Researcher Stats Executor"
  description: "Workflow to execute researcher game."
  context-variables:
    debugger:
      enabled: true
    google-genai:
      api_key: "$TEMP_CONTEXT_VARIABLE_GOOGLE_GENERATIVE_AI_API_KEY"
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
    machina-ai-fast:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_GROQ_API_KEY"
    sportradar-soccer:
      sportradar_api_key: "$TEMP_CONTEXT_VARIABLE_SPORTRADAR_SOCCER_V4_API_KEY"
  outputs:
    workflow-status: "$.get('game-exists') is True and 'executed' or 'skipped'"
  tasks:

    # load-next-agenda
    - type: document
      name: load-next-agenda
      connector:
        name: machina-ai
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["value.agenda-control.updated", 1]
      filters:
        metadata.content-group: "{'$in': ['COVERAGE_RESEARCHER_STATS']}"
        value.agenda-control.processing: "{'$ne': True}"
        value.agenda-control.finished: "{'$ne': True}"
      inputs:
        name: "'content-agenda'"
      outputs:
        agenda-exists: "len($.get('documents', [])) > 0 if $.get('documents') else False"
        agenda-document: "$.get('documents', [{}])[0] if $.get('documents') else None"
        agenda-document-id: "$.get('documents', [{}])[0].get('_id', '') if $.get('documents') else ''"
        agenda-metadata: "$.get('documents', [{}])[0].get('metadata', {}) if $.get('documents') else None"
        agenda-value: "$.get('documents', [{}])[0].get('value', {}) if $.get('documents') else None"

    # document-agenda-control
    - type: document
      name: coverage-agenda-control-processing
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'processing': True,
              'updated': datetime.utcnow()
            }
          }

    # mapping agenda-control
    - type: mapping
      name: coverage-mapping-agenda-control
      condition: "$.get('agenda-exists') is True"
      inputs:
        _document: "$.get('agenda-value')"
        _metadata: "$.get('agenda-metadata')"
      outputs:
        agenda-control: "$.get('agenda-control')"
        agenda-control-finished: "True"
        agenda-counter: "$.get('agenda-counter')"
        content-group: "$.get('content-group')"
        content-name: "$.get('content-name')"
        content-topic: "$.get('content-topic')"
        event_code: "$.get('event_code')"
        script-instructions: "$.get('script-instructions')"

    # mapping researcher-stats-control
    - type: mapping
      name: coverage-mapping-researcher-stats-control
      condition: "$.get('agenda-exists') is True"
      inputs:
        _document: "$.get('agenda-value')"
        _metadata: "$.get('agenda-metadata')"
      outputs:
        stats-control: "$.get('stats-control')"
        stats-control-status: "True"

    # sportradar-stats-requests (have-content-to-process)
    ## START SPORTRADAR-STATS

    # load-game-by-code
    - type: document
      name: load-game-by-code
      condition: "$.get('event_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["value.start_time", 1]
      filters:
        metadata.event_code: "$.get('event_code')"
      inputs:
        name: "{'$in': ['soccer-game']}"
      outputs:
        game-exists: "len($.get('documents', [])) > 0 if $.get('documents') else False"
        game-metadata: "$.get('documents')[0].get('metadata', {}) if $.get('documents') else None"
        game-value: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"

    # coverage-mapping-researcher-stats-event-data
    - type: mapping
      name: "coverage-mapping-researcher-stats-event-data"
      description: "Transform the sportradar soccer data"
      condition: "$.get('game-exists')"
      inputs:
        event_selected: "$.get('game-value')"
      outputs:
        season: "$.get('season')"
        season_title: "$.get('season_title')"
        team_home_name: "$.get('team_home_name')"
        team_away_name: "$.get('team_away_name')"
        team_home_id: "$.get('team_home_id')"
        team_away_id: "$.get('team_away_id')"
        title: "$.get('title')"

    ## load competitor home latest matches
    
    # fetch-competitor
    - type: "connector"
      name: "fetch-competitor-home"
      description: "Get a competitor data from SportRadar" 
      condition: "$.get('game-exists') is True"
      connector:
        name: "sportradar-soccer"
        command: "get-competitors/{competitor_id}/{data_type}"
        command_attribute:
          competitor_id: "$.get('team_home_id')"
          data_type: "'summaries.json'"
      inputs:
        api_key: "$.get('sportradar_api_key')"
      outputs:
        result-competitor: |
          [
            {
              'sport_event': c.get('sport_event', ''),
              'sport_event_status': c.get('sport_event_status', '')
            }
            for c in $.get('summaries', [])[:3]
          ]
        last: "$.get('summaries', [])[0] if len($.get('summaries', [])) > 0 else None"
        last_plus: "$.get('summaries', [])[1] if len($.get('summaries', [])) > 1 else None"
        last_plus_plus: "$.get('summaries', [])[2] if len($.get('summaries', [])) > 2 else None"

    # mapping-home-last-match
    - type: mapping
      name: coverage-mapping-researcher-stats-lastmatch
      description: "Mapping data from last match."
      condition: "$.get('game-exists') is True and $.get('last') is not None"
      inputs:
        item: "$.get('last')"
        competitor_id: "$.get('team_home_id')"
      outputs:
        last_match: "$.get('last_match')"
        competitors: "$.get('competitors')"
        competitor_home_name: "$.get('competitor_home_name')"
        competitor_away_name: "$.get('competitor_away_name')"
        competitor_home_sr_id: "$.get('competitor_home_sr_id')"
        competitor_away_sr_id: "$.get('competitor_away_sr_id')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_context: "$.get('event_context')"
        last_match_date: "$.get('event_date')"
        last_match_title: "$.get('last_match_title')"
        last_match_statistics: "$.get('statistics')"
        last_match_status: "$.get('event_status')"
        venue: "$.get('venue')"
        venue_title: "$.get('venue_title')"
        venue_city: "$.get('venue_city')"
        venue_country: "$.get('venue_country')"
        venue_id: "$.get('venue_id')"
        venue_sr_id: "$.get('venue_sr_id')"

    # prompt-soccer-home-last-match
    - type: prompt
      name: prompt-coverage-researcher-stats-lastmatch
      description: "Prompt soccer last match."
      condition: "$.get('game-exists') is True and $.get('last') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-flash"
      inputs:
        selected_team: "$.get('team_home_name')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_competitors: "$.get('competitors')"
        last_match_event_date: "$.get('last_match_date')"
        last_match_context: "$.get('last_match_context')"
        last_match_statistics: "$.get('last_match_statistics')"
        last_match_status: "$.get('last_match_status')"
        last_match_title: "$.get('last_match_title')"
        last_match_venue: "$.get('venue')"
      outputs:
        research-home-last-match-bulk: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_home_id)',
                'content_type': 'last-match-analysis',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('snippets', [])
          ]
        research-home-last-match-key_players: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_home_id)',
                'content_type': 'last-match-key-players',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('key_players', [])
          ]

    # mapping-home-last-plus-match
    - type: mapping
      name: coverage-mapping-researcher-stats-lastmatch
      description: "Mapping data from last match."
      condition: "$.get('game-exists') is True and $.get('last_plus') is not None"
      inputs:
        item: "$.get('last_plus')"
        competitor_id: "$.get('team_home_id')"
      outputs:
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        competitors: "$.get('competitors')"
        competitor_home_name: "$.get('competitor_home_name')"
        competitor_away_name: "$.get('competitor_away_name')"
        competitor_home_sr_id: "$.get('competitor_home_sr_id')"
        competitor_away_sr_id: "$.get('competitor_away_sr_id')"
        last_match: "$.get('last_match')"
        last_match_context: "$.get('event_context')"
        last_match_date: "$.get('event_date')"
        last_match_title: "$.get('last_match_title')"
        last_match_statistics: "$.get('statistics')"
        last_match_status: "$.get('event_status')"
        venue: "$.get('venue')"
        venue_title: "$.get('venue_title')"
        venue_city: "$.get('venue_city')"
        venue_country: "$.get('venue_country')"
        venue_id: "$.get('venue_id')"
        venue_sr_id: "$.get('venue_sr_id')"

    # prompt-soccer-home-last-plus-match
    - type: prompt
      name: prompt-coverage-researcher-stats-lastmatch
      description: "Prompt soccer last match."
      condition: "$.get('game-exists') is True and $.get('last_plus') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-flash"
      inputs:
        selected_team: "$.get('team_home_name')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_competitors: "$.get('competitors')"
        last_match_event_date: "$.get('last_match_date')"
        last_match_context: "$.get('last_match_context')"
        last_match_statistics: "$.get('last_match_statistics')"
        last_match_status: "$.get('last_match_status')"
        last_match_title: "$.get('last_match_title')"
        last_match_venue: "$.get('venue')"
      outputs:
        research-home-last-plus-match-bulk: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_home_id)',
                'content_type': 'last-match-analysis',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('snippets', [])
          ]
        research-home-last-plus-match-key_players: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_home_id)',
                'content_type': 'last-match-key-players',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('key_players', [])
          ]

    ## load competitor away latest matches
    
    # fetch-competitor
    - type: "connector"
      name: "fetch-competitor-away"
      description: "Get a competitor data from SportRadar" 
      condition: "$.get('game-exists') is True"
      connector:
        name: "sportradar-soccer"
        command: "get-competitors/{competitor_id}/{data_type}"
        command_attribute:
          competitor_id: "$.get('team_away_id')"
          data_type: "'summaries.json'"
      inputs:
        api_key: "$.get('sportradar_api_key')"
      outputs:
        result-competitor: |
          [
            {
              'sport_event': c.get('sport_event', ''),
              'sport_event_status': c.get('sport_event_status', '')
            }
            for c in $.get('summaries', [])[:3]
          ]
        last: "$.get('summaries', [])[0] if len($.get('summaries', [])) > 0 else None"
        last_plus: "$.get('summaries', [])[1] if len($.get('summaries', [])) > 1 else None"
        last_plus_plus: "$.get('summaries', [])[2] if len($.get('summaries', [])) > 2 else None"

    # mapping-away-last-match
    - type: mapping
      name: coverage-mapping-researcher-stats-lastmatch
      description: "Mapping data from last match."
      condition: "$.get('game-exists') is True and $.get('last') is not None"
      inputs:
        item: "$.get('last')"
        competitor_id: "$.get('team_away_id')"
      outputs:
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        competitors: "$.get('competitors')"
        competitor_home_name: "$.get('competitor_home_name')"
        competitor_away_name: "$.get('competitor_away_name')"
        competitor_home_sr_id: "$.get('competitor_home_sr_id')"
        competitor_away_sr_id: "$.get('competitor_away_sr_id')"
        last_match: "$.get('last_match')"
        last_match_context: "$.get('event_context')"
        last_match_date: "$.get('event_date')"
        last_match_title: "$.get('last_match_title')"
        last_match_statistics: "$.get('statistics')"
        last_match_status: "$.get('event_status')"
        venue: "$.get('venue')"
        venue_title: "$.get('venue_title')"
        venue_city: "$.get('venue_city')"
        venue_country: "$.get('venue_country')"
        venue_id: "$.get('venue_id')"
        venue_sr_id: "$.get('venue_sr_id')"

    # prompt-soccer-away-last-match
    - type: prompt
      name: prompt-coverage-researcher-stats-lastmatch
      description: "Prompt soccer last match."
      condition: "$.get('game-exists') is True and $.get('last') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-flash"
      inputs:
        selected_team: "$.get('team_home_name')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_competitors: "$.get('competitors')"
        last_match_event_date: "$.get('last_match_date')"
        last_match_context: "$.get('last_match_context')"
        last_match_statistics: "$.get('last_match_statistics')"
        last_match_status: "$.get('last_match_status')"
        last_match_title: "$.get('last_match_title')"
        last_match_venue: "$.get('venue')"
      outputs:
        research-away-last-match-bulk: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_away_id)',
                'content_type': 'last-match-analysis',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('snippets', [])
          ]
        research-away-last-match-key_players: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_away_id)',
                'content_type': 'last-match-key-players',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('key_players', [])
          ]

    # mapping-away-last-plus-match
    - type: mapping
      name: coverage-mapping-researcher-stats-lastmatch
      description: "Mapping data from last match."
      condition: "$.get('game-exists') is True and $.get('last_plus') is not None"
      inputs:
        item: "$.get('last_plus')"
        competitor_id: "$.get('team_away_id')"
      outputs:
        last_match: "$.get('last_match')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        competitors: "$.get('competitors')"
        competitor_home_name: "$.get('competitor_home_name')"
        competitor_away_name: "$.get('competitor_away_name')"
        competitor_home_sr_id: "$.get('competitor_home_sr_id')"
        competitor_away_sr_id: "$.get('competitor_away_sr_id')"
        last_match_context: "$.get('event_context')"
        last_match_date: "$.get('event_date')"
        last_match_title: "$.get('last_match_title')"
        last_match_statistics: "$.get('statistics')"
        last_match_status: "$.get('event_status')"
        venue: "$.get('venue')"
        venue_title: "$.get('venue_title')"
        venue_city: "$.get('venue_city')"
        venue_country: "$.get('venue_country')"
        venue_id: "$.get('venue_id')"
        venue_sr_id: "$.get('venue_sr_id')"

    # prompt-soccer-away-last-plus-match
    - type: prompt
      name: prompt-coverage-researcher-stats-lastmatch
      description: "Prompt soccer last match."
      condition: "$.get('game-exists') is True and $.get('last_plus') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-flash"
      inputs:
        selected_team: "$.get('team_home_name')"
        event_days_ago: "$.get('event_days_ago')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_competitors: "$.get('competitors')"
        last_match_event_date: "$.get('last_match_date')"
        last_match_context: "$.get('last_match_context')"
        last_match_statistics: "$.get('last_match_statistics')"
        last_match_status: "$.get('last_match_status')"
        last_match_title: "$.get('last_match_title')"
        last_match_venue: "$.get('venue')"
      outputs:
        research-away-last-plus-match-bulk: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_away_id)',
                'content_type': 'last-match-analysis',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('snippets', [])
          ]
        research-away-last-plus-match-key_players: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_away_id)',
                'content_type': 'last-match-key-players',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('key_players', [])
          ]

    ## save / update documents
    
    # update-snippets
    - type: "document"
      name: "update-snippets"
      condition: "$.get('game-exists') is True"
      description: "Update the snippets."
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "'content-snippet'"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: |
          [
            *$.get('research-home-last-match-bulk', []),
            *$.get('research-home-last-match-key_players', []),
            *$.get('research-away-last-match-bulk', []),
            *$.get('research-away-last-match-key_players', []),
            *$.get('research-home-last-plus-match-bulk', []),
            *$.get('research-home-last-plus-match-key_players', []),
            *$.get('research-away-last-plus-match-bulk', []),
            *$.get('research-away-last-plus-match-key_players', [])
          ]

    ## END SPORTRADAR-STATS

    # document-agenda-control
    - type: document
      name: coverage-agenda-control-update
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'counter': $.get('agenda-counter', 0) + 1,
              'finished': $.get('agenda-control-finished', False),
              'processing': False,
              'updated': datetime.utcnow()
            },
            'stats-control': {
              **$.get('stats-control', {}),
              'status': $.get('stats-control-status')
            }
          }