workflow:

  name: coverage-researcher-stories
  title: "Coverage - Researcher Stories"
  description: "Workflow to execute Soccer Game Researcher content stories."
  context-variables:
    debugger:
      enabled: true
    google-genai:
      api_key: "$TEMP_CONTEXT_VARIABLE_GOOGLE_GENERATIVE_AI_API_KEY"
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
  inputs:
    content-group: "$.get('content-group', 'SPORTS_SOCCER_GAME')"
    topic: "$.get('topic', 'history')"
  outputs:
    workflow-status: "$.get('workflow-status', 'skipped')"
  tasks:

    # docs: load-next-agenda
    - type: document
      name: load-next-agenda
      connector:
        name: machina-ai
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["value.agenda-control.updated", 1]
      filters:
        metadata.content-group: "$.get('content-group')"
        value.agenda-control.finished: "{'$ne': True}"
        value.agenda-control.moderated: "True"
        value.agenda-control.processing: "{'$ne': True}"
        value.agenda-control.searching: "{'$ne': True}"
        value.agenda-control.snippets: "True"
        value.agenda-control.stories: "{'$ne': True}"
        value.agenda-object.topic: "$.get('topic')"
      inputs:
        name: "'content-agenda'"
      outputs:
        agenda-exists: "len($.get('documents', [])) > 0 if $.get('documents') else False"
        agenda-document: "$.get('documents', [{}])[0] if $.get('documents') else None"
        agenda-document-id: "$.get('documents', [{}])[0].get('_id', '') if $.get('documents') else ''"
        agenda-metadata: "$.get('documents', [{}])[0].get('metadata', {}) if $.get('documents') else None"
        agenda-value: "$.get('documents', [{}])[0].get('value', {}) if $.get('documents') else None"
        event_code: "$.get('documents', [{}])[0].get('metadata', {}).get('event_code', '') if $.get('documents') else ''"

    # map: coverage-mapping-agenda-control
    - type: mapping
      name: coverage-mapping-agenda-control
      condition: "$.get('agenda-exists') is True"
      inputs:
        _document: "$.get('agenda-value')"
        _metadata: "$.get('agenda-metadata')"
      outputs:
        agenda-counter: "$.get('agenda-counter')"
        agenda-control: "$.get('agenda-control')"
        agenda-control-finished: "$.get('agenda-control', {}).get('finished', False)"
        agenda-control-searching: "$.get('agenda-control', {}).get('searching', False)"
        content-group: "$.get('content-group')"
        content-name: "$.get('content-name')"
        content-topic: "$.get('content-topic')"
        team_code: "$.get('team_code')"
        instructions: "$.get('script-instructions')"

    # docs: agenda-version-control
    - type: document
      name: agenda-version-control-processing
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'processing': True,
              'updated': datetime.utcnow()
            }
          }

    # docs: load-stories
    - type: document
      name: load-stories
      condition: "$.get('agenda-exists') is True"
      config:
        action: "search"
        search-limit: 100
        search-vector: false
        search-sorters: ["value.version_control.updated", 1]
      filters:
        metadata.content-group: "$.get('content-group', '')"
        metadata.content-name: "$.get('content-name', '')"
        metadata.content-topic: "$.get('content-topic', '')"
      inputs:
        name: "{'$in': ['content-story']}"
      outputs:
        available-stories: |
          [
            {
              "story_id": c.get('_id', ''),
              "story_title": c.get('value', {}).get('title', ''),
            }
            for c in $.get('documents', [])
          ]
        available-stories-count: "len($.get('documents', []))"

    # docs: load-snippets
    - type: document
      name: load-snippets
      condition: "$.get('agenda-exists') is True"
      config:
        action: "search"
        search-limit: 100
        search-vector: false
        search-sorters: ["value.version_control.updated", 1]
      filters:
        metadata.content-group: "$.get('content-group', '')"
        metadata.content-name: "$.get('content-name', '')"
        metadata.content-topic: "$.get('content-topic', '')"
        value.agenda-control.stories: "{'$ne': True}"
      inputs:
        name: "{'$in': ['content-snippet']}"
      outputs:
        snippets-documents: "$.get('documents', [])"
    
    # mapping: coverage-mapping-snippets-results
    - type: mapping
      name: coverage-mapping-snippets-results
      condition: "$.get('agenda-exists') is True"
      inputs:
        _documents: "$.get('snippets-documents', [])"
      outputs:
        next-story-to-be-verified: "$.get('next-story-to-be-verified', None)"
        snippet-document-id: "$.get('next-story-to-be-verified', {}).get('_id', '') if $.get('next-story-to-be-verified') else ''"
        workflow-status: "'executed'"
        stories-snippets-not-verified: "$.get('stories-snippets-not-verified', [])"
        stories-snippets-not-verified-count: "$.get('stories-snippets-not-verified-count', 0)"
        version-control-status: |
          (
            ($.(agenda-exists) is True
             and ($.(available-stories-count) > 0)
             and ($.get('stories-snippets-not-verified-count', 0) == 0)
            ) or
            (
             ($.(available-stories-count) == 0)
             and ($.get('stories-snippets-not-verified-count', 0) == 0)
             and ($.(agenda-counter) > 100)
            )
          ) and 'finished' or 'processing'

    # docs: snippet-version-control
    - type: document
      name: snippet-version-control
      condition: "$.get('next-story-to-be-verified') is not None"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('snippet-document-id')"
      documents:
        content-snippet: |
          {
            **$.get('next-story-to-be-verified', {}).get('value', {}),
            'agenda-control': {
              **$.get('next-story-to-be-verified', {}).get('value', {}).get('agenda-control', {}),
              'stories': True,
              'updated': datetime.utcnow()
            }
          }

    # TEMP GENERATE POLLS AND QUIZZES FROM THAT

    # prompt-coverage-custom-polls
    - type: prompt
      name: prompt-coverage-custom-polls
      description: "prompt-custom-polls"
      condition: "$.get('next-story-to-be-verified') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-pro"
      inputs:
        _custom-context: "$.get('next-story-to-be-verified', {}).get('value', {})"
        _custom-instruction: "''"
      outputs:
        generated-questions: "$.get('questions', [])"

    # 0 bulk-content-custom-polls
    - type: document
      name: bulk-content-custom-polls
      condition: "$.get('next-story-to-be-verified') is not None"
      description: "Bulk save the polls."
      config:
        action: "bulk-save"
        embed-vector: false
      document_name: "'content-poll'"
      documents:
        items: "$.get('parsed_polls', [])"
      inputs:
        parsed_polls: |
          [
            {
              **c,
              "metadata": {
                "event_code": "$.(event_code)"
              },
              "version_control": {
                "embed_image_status": "pending"
              }
            }
            for c in $.get('generated-questions', [])
          ]

    # prompt-coverage-custom-quizzes
    - type: prompt
      name: prompt-coverage-custom-quizzes
      description: "prompt-custom-quizzes"
      condition: "$.get('next-story-to-be-verified') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-pro"
      inputs:
        _custom-context: "$.get('next-story-to-be-verified', {}).get('value', {})"
        _custom-instruction: "''"
      outputs:
        generated-questions: "$.get('questions', [])"

    # 0 bulk-content-custom-quizzes
    - type: document
      name: bulk-content-custom-quizzes
      condition: "$.get('next-story-to-be-verified') is not None"
      description: "Bulk save the quizzes."
      config:
        action: "bulk-save"
        embed-vector: false
      document_name: "'content-quiz'"
      documents:
        items: "$.get('parsed_quizzes', [])"
      inputs:
        parsed_quizzes: |
          [
            {
              **c,
              "metadata": {
                "event_code": "$.(event_code)"
              },
              "version_control": {
                "embed_image_status": "pending"
              }
            }
            for c in $.get('generated-questions', [])
          ]

    # TEMP END

    # prompt: coverage-researcher-stories-selector
    - type: prompt
      name: coverage-researcher-stories-selector
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-pro"
      condition: "$.get('next-story-to-be-verified') is not None"
      inputs:
        _available-stories: "$.get('available-stories', [])"
        _snippet-item: "$.get('next-story-to-be-verified', {}).get('value', {})"
      outputs:
        stories-selector-result: "$"
        story-found: "$.get('story-found', False)"
        story-id: "$.get('story-id', '')"

    # docs: load-story to enrich
    - type: document
      name: load-story-to-enrich
      condition: "$.get('next-story-to-be-verified') is not None and $.get('story-found') is True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["value.version_control.updated", -1]
      filters:
        document_id: "$.get('story-id')"
      inputs:
        name: "{'$in': ['content-story']}"
      outputs:
        story-to-enrich: |
          $.get('documents', [{}])[0].get('value', {}) if $.get('documents') else None
        story-to-enrich-parsed: |
          [
            {
              "text": c.get('value', {}).get('text', ''),
              "title": c.get('value', {}).get('title', ''),
              "subject": c.get('value', {}).get('subject', ''),
              "topic": c.get('value', {}).get('topic', ''),
              "relevance": c.get('value', {}).get('relevance', '')
            } for c in $.get('documents', [])
          ]

    # prompt: coverage-researcher-stories-enricher
    - type: prompt
      name: coverage-researcher-stories-enricher
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-pro"
      condition: "$.get('next-story-to-be-verified') is not None"
      inputs:
        _1-story-if-exists: "$.get('story-to-enrich-parsed', [])"
        _2-new-information: "$.get('next-story-to-be-verified', {}).get('value', {})"
      outputs:
        stories-enricher-result: |
          {
            "text": $.get('story-content', ''),
            "title": $.get('story-title', ''),
            "subject": $.get('story-subject', ''),
            "topic": $.get('story-topic', ''),
            "relevance": $.get('story-relevance', ''),
            "metadata": {
              **$.(agenda-metadata),
              'team_code': '$.(team_code)'
            }
          }

    # update-content-story
    - type: document
      name: update-content-story
      condition: "$.get('next-story-to-be-verified') is not None and $.get('story-found') is True"
      config:
        action: "update"
        embed-vector: true
        force-update: true
      connector:
        name: machina-ai
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        document_id: "$.get('story-id')"
      documents:
        content-story: "$.get('stories-enricher-result', {})"

    # save-content-story
    - type: document
      name: save-content-story
      condition: "$.get('next-story-to-be-verified') is not None and $.get('story-found') is False"
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: machina-ai
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "'content-story'"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: |
          [
            $.get('stories-enricher-result', {})
          ]

    # VERSION CONTROL

    # docs: agenda-version-control
    - type: document
      name: agenda-version-control-update
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'counter': $.get('agenda-counter', 0) + 1,
              'finished': $.get('version-control-status') == 'finished' and True or False,
              'moderated': True,
              'processing': False,
              'searching': False,
              'snippets': True,
              'stories': $.get('version-control-status') == 'finished' and True or False,
              'interactive': False,
              'updated': datetime.utcnow()
            }
          }