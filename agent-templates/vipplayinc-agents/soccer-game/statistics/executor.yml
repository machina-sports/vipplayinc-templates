workflow:

  name: coverage-researcher-statistics
  title: "Coverage - Researcher Statistics"
  description: "Workflow to execute Soccer Game Researcher content statistics."
  context-variables:
    debugger:
      enabled: true
    google-genai:
      api_key: "$TEMP_CONTEXT_VARIABLE_GOOGLE_GENERATIVE_AI_API_KEY"
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
    sportradar-soccer:
      sportradar_api_key: "$TEMP_CONTEXT_VARIABLE_SPORTRADAR_SOCCER_V4_API_KEY"
  inputs:
    content-group: "$.get('content-group', 'SPORTS_SOCCER_GAME')"
    topic: "$.get('topic', 'statistics')"
  outputs:
    workflow-status: "$.get('workflow-status', 'skipped')"
  tasks:

    # docs: load-next-agenda
    - type: document
      name: load-next-agenda
      connector:
        name: machina-ai
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["value.agenda-control.updated", 1]
      filters:
        metadata.content-group: "$.get('content-group')"
        value.agenda-control.finished: "{'$ne': True}"
        value.agenda-control.processing: "{'$ne': True}"
        value.agenda-object.topic: "$.get('topic')"
      inputs:
        name: "'content-agenda'"
      outputs:
        agenda-exists: "len($.get('documents', [])) > 0 if $.get('documents') else False"
        agenda-document: "$.get('documents', [{}])[0] if $.get('documents') else None"
        agenda-document-id: "$.get('documents', [{}])[0].get('_id', '') if $.get('documents') else ''"
        agenda-metadata: "$.get('documents', [{}])[0].get('metadata', {}) if $.get('documents') else None"
        agenda-value: "$.get('documents', [{}])[0].get('value', {}) if $.get('documents') else None"

    # map: coverage-mapping-agenda-control
    - type: mapping
      name: coverage-mapping-agenda-control
      condition: "$.get('agenda-exists') is True"
      inputs:
        _document: "$.get('agenda-value')"
        _metadata: "$.get('agenda-metadata')"
      outputs:
        agenda-counter: "$.get('agenda-counter')"
        agenda-control: "$.get('agenda-control')"
        agenda-control-finished: "$.get('agenda-control', {}).get('finished', False)"
        content-group: "$.get('content-group')"
        content-name: "$.get('content-name')"
        content-topic: "$.get('content-topic')"
        event_code: "$.get('event_code')"
        team_code: "$.get('team_code')"
        instructions: "$.get('script-instructions')"
        workflow-status: "'executed'"

    # docs: agenda-version-control
    - type: document
      name: agenda-version-control-processing
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'processing': True,
              'updated': datetime.utcnow()
            }
          }

    # FETCH COMPETITOR

    # fetch-competitor
    - type: "connector"
      name: "fetch-competitor-home"
      description: "Get a competitor data from SportRadar" 
      condition: "$.get('team_code') is not None"
      connector:
        name: "sportradar-soccer"
        command: "get-competitors/{competitor_id}/{data_type}"
        command_attribute:
          competitor_id: "$.get('team_code')"
          data_type: "'summaries.json'"
      inputs:
        api_key: "$.get('sportradar_api_key')"
      outputs:
        result-competitor: |
          [
            {
              'sport_event': c.get('sport_event', ''),
              'sport_event_status': c.get('sport_event_status', '')
            }
            for c in $.get('summaries', [])[:3]
          ]
        last: "$.get('summaries', [])[0] if len($.get('summaries', [])) > 0 else None"
        last_plus: "$.get('summaries', [])[1] if len($.get('summaries', [])) > 1 else None"
        last_plus_plus: "$.get('summaries', [])[2] if len($.get('summaries', [])) > 2 else None"

    # mapping-home-last-match
    - type: mapping
      name: coverage-researcher-statistics-event-data
      description: "Mapping data from last match."
      condition: "$.get('team_code') is not None and $.get('last') is not None"
      inputs:
        item: "$.get('last')"
        competitor_id: "$.get('event_code')"
      outputs:
        last_match: "$.get('last_match')"
        competitors: "$.get('competitors')"
        competitor_home_name: "$.get('competitor_home_name')"
        competitor_away_name: "$.get('competitor_away_name')"
        competitor_home_sr_id: "$.get('competitor_home_sr_id')"
        competitor_away_sr_id: "$.get('competitor_away_sr_id')"
        event_date_gmt3: "$.get('event_date_gmt3')"
        event_time_gmt3: "$.get('event_time_gmt3')"
        event_days_ago: "$.get('event_date_gmt3')"
        event_day_of_week: "$.get('event_day_of_week')"
        last_match_context: "$.get('event_context')"
        last_match_date: "$.get('event_date')"
        last_match_title: "$.get('last_match_title')"
        last_match_statistics: "$.get('statistics')"
        last_match_status: "$.get('event_status')"
        venue: "$.get('venue')"
        venue_title: "$.get('venue_title')"
        venue_city: "$.get('venue_city')"
        venue_country: "$.get('venue_country')"
        venue_id: "$.get('venue_id')"
        venue_sr_id: "$.get('venue_sr_id')"
        wrapped_event_status_summary: "$.get('wrapped_event_status_summary')"
        wrapped_match_statistics: "$.get('wrapped_match_statistics')"
        wrapped_match_cards: "$.get('wrapped_match_cards')"
        wrapped_match_conditions: "$.get('wrapped_match_conditions')"
        wrapped_broadcast_info: "$.get('wrapped_broadcast_info')"
        wrapped_home_key_players: "$.get('wrapped_home_key_players')"
        wrapped_away_key_players: "$.get('wrapped_away_key_players')"
        wrapped_home_scorers: "$.get('wrapped_home_scorers')"
        wrapped_away_scorers: "$.get('wrapped_away_scorers')"
        wrapped_home_assists: "$.get('wrapped_home_assists')"
        wrapped_away_assists: "$.get('wrapped_away_assists')"
        wrapped_disciplinary_actions: "$.get('wrapped_disciplinary_actions')"
        wrapped_substitutions: "$.get('wrapped_substitutions')"

    # coverage-researcher-statistics-prompt
    - type: prompt
      name: coverage-researcher-statistics-prompt
      description: "Prompt soccer last match."
      condition: "$.get('team_code') is not None and $.get('last') is not None"
      connector:
        name: "google-genai"
        command: "invoke_prompt"
        model: "gemini-2.5-pro"
      inputs:
        selected_team: "$.get('content-topic')"
        event_date_gmt3: "$.get('event_date_gmt3')"
        event_time_gmt3: "$.get('event_time_gmt3')"
        event_days_ago: "$.get('event_date_gmt3')"
        event_day_of_week: "$.get('event_day_of_week')"
        wrapped_event_status_summary: "$.get('wrapped_event_status_summary')"
        wrapped_match_statistics: "$.get('wrapped_match_statistics')"
        wrapped_match_cards: "$.get('wrapped_match_cards')"
        wrapped_match_conditions: "$.get('wrapped_match_conditions')"
        wrapped_broadcast_info: "$.get('wrapped_broadcast_info')"
        wrapped_home_key_players: "$.get('wrapped_home_key_players')"
        wrapped_away_key_players: "$.get('wrapped_away_key_players')"
        wrapped_home_scorers: "$.get('wrapped_home_scorers')"
        wrapped_away_scorers: "$.get('wrapped_away_scorers')"
        wrapped_home_assists: "$.get('wrapped_home_assists')"
        wrapped_away_assists: "$.get('wrapped_away_assists')"
        wrapped_disciplinary_actions: "$.get('wrapped_disciplinary_actions')"
        wrapped_substitutions: "$.get('wrapped_substitutions')"
      outputs:
        research-home-last-match-bulk: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_code)',
                'content_type': 'last-match-analysis',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('snippets', [])
          ]
        research-home-last-match-key_players: |
          [
            {
              'questions': c.get('questions', ''),
              'subject': '$.(last_match_title)',
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'competitor_id': '$.(team_code)',
                'content_type': 'last-match-key-players',
                'content-group': '$.(content-group)',
                'content-name': '$.(content-name)',
                'content-topic': '$.(content-topic)',
                'event_code': '$.(event_code)'
              }
            }
            for c in $.get('key_players', [])
          ]

    # update-snippets
    - type: "document"
      name: "update-snippets"
      condition: "$.get('team_code') is not None and $.get('last') is not None"
      description: "Update the snippets."
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "'content-snippet'"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: |
          [
            *$.get('research-home-last-match-bulk', []),
            *$.get('research-home-last-match-key_players', [])
          ]

    # VERSION CONTROL

    # docs: agenda-version-control
    - type: document
      name: agenda-version-control-update
      condition: "$.get('agenda-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      filters:
        document_id: "$.get('agenda-document-id')"
      documents:
        content-agenda: |
          {
            **$.get('agenda-value', {}),
            'agenda-control': {
              **$.get('agenda-control', {}),
              'counter': $.get('agenda-counter', 0) + 1,
              'finished': True,
              'processing': False,
              'updated': datetime.utcnow()
            }
          }